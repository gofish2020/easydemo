// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/raft.proto

package raftpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftClient interface {
	Consensus(ctx context.Context, opts ...grpc.CallOption) (Raft_ConsensusClient, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Consensus(ctx context.Context, opts ...grpc.CallOption) (Raft_ConsensusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Raft_ServiceDesc.Streams[0], "/proto.Raft/consensus", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftConsensusClient{stream}
	return x, nil
}

type Raft_ConsensusClient interface {
	Send(*RaftMessage) error
	Recv() (*RaftMessage, error)
	grpc.ClientStream
}

type raftConsensusClient struct {
	grpc.ClientStream
}

func (x *raftConsensusClient) Send(m *RaftMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftConsensusClient) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftServer is the server API for Raft service.
// All implementations must embed UnimplementedRaftServer
// for forward compatibility
type RaftServer interface {
	Consensus(Raft_ConsensusServer) error
	mustEmbedUnimplementedRaftServer()
}

// UnimplementedRaftServer must be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (UnimplementedRaftServer) Consensus(Raft_ConsensusServer) error {
	return status.Errorf(codes.Unimplemented, "method Consensus not implemented")
}
func (UnimplementedRaftServer) mustEmbedUnimplementedRaftServer() {}

// UnsafeRaftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftServer will
// result in compilation errors.
type UnsafeRaftServer interface {
	mustEmbedUnimplementedRaftServer()
}

func RegisterRaftServer(s grpc.ServiceRegistrar, srv RaftServer) {
	s.RegisterService(&Raft_ServiceDesc, srv)
}

func _Raft_Consensus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).Consensus(&raftConsensusServer{stream})
}

type Raft_ConsensusServer interface {
	Send(*RaftMessage) error
	Recv() (*RaftMessage, error)
	grpc.ServerStream
}

type raftConsensusServer struct {
	grpc.ServerStream
}

func (x *raftConsensusServer) Send(m *RaftMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftConsensusServer) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Raft_ServiceDesc is the grpc.ServiceDesc for Raft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Raft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "consensus",
			Handler:       _Raft_Consensus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/raft.proto",
}

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	Sendfile(ctx context.Context, opts ...grpc.CallOption) (File_SendfileClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Sendfile(ctx context.Context, opts ...grpc.CallOption) (File_SendfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/proto.File/sendfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSendfileClient{stream}
	return x, nil
}

type File_SendfileClient interface {
	Send(*FileContext) error
	CloseAndRecv() (*FileInfoResp, error)
	grpc.ClientStream
}

type fileSendfileClient struct {
	grpc.ClientStream
}

func (x *fileSendfileClient) Send(m *FileContext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSendfileClient) CloseAndRecv() (*FileInfoResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileInfoResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	Sendfile(File_SendfileServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) Sendfile(File_SendfileServer) error {
	return status.Errorf(codes.Unimplemented, "method Sendfile not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_Sendfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Sendfile(&fileSendfileServer{stream})
}

type File_SendfileServer interface {
	SendAndClose(*FileInfoResp) error
	Recv() (*FileContext, error)
	grpc.ServerStream
}

type fileSendfileServer struct {
	grpc.ServerStream
}

func (x *fileSendfileServer) SendAndClose(m *FileInfoResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSendfileServer) Recv() (*FileContext, error) {
	m := new(FileContext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.File",
	HandlerType: (*FileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendfile",
			Handler:       _File_Sendfile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/raft.proto",
}
